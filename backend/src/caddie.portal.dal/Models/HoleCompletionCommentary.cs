using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace caddie.portal.dal.Models;

/// <summary>
/// AI-generated commentary for completed holes
/// </summary>
[Table("hole_completion_commentary")]
public partial class HoleCompletionCommentary
{
    [Key]
    [Column("id")]
    public int Id { get; set; }

    [Required]
    [Column("round_id")]
    public int RoundId { get; set; }

    [Required]
    [Column("user_id")]
    public int UserId { get; set; }

    /// <summary>
    /// Hole number (1-18)
    /// </summary>
    [Required]
    [Range(1, 18)]
    [Column("hole_number")]
    public int HoleNumber { get; set; }

    /// <summary>
    /// Player's score for the hole
    /// </summary>
    [Required]
    [Range(1, 15)]
    [Column("score")]
    public int Score { get; set; }

    /// <summary>
    /// Hole par value
    /// </summary>
    [Required]
    [Range(3, 5)]
    [Column("par")]
    public int Par { get; set; }

    /// <summary>
    /// AI-generated commentary text
    /// </summary>
    [Required]
    [Column("commentary")]
    public string Commentary { get; set; } = string.Empty;

    /// <summary>
    /// Brief performance summary
    /// </summary>
    [MaxLength(100)]
    [Column("performance_summary")]
    public string? PerformanceSummary { get; set; }

    /// <summary>
    /// Score description (Eagle, Birdie, Par, etc.)
    /// </summary>
    [MaxLength(50)]
    [Column("score_description")]
    public string? ScoreDescription { get; set; }

    /// <summary>
    /// Level of encouragement in commentary (1=most supportive, 5=celebratory)
    /// </summary>
    [Range(1, 5)]
    [Column("encouragement_level")]
    public int EncouragementLevel { get; set; } = 3;

    /// <summary>
    /// Number of shots taken on the hole
    /// </summary>
    [Column("shot_count")]
    public int? ShotCount { get; set; }

    /// <summary>
    /// Whether commentary was automatically generated or manually created
    /// </summary>
    [Column("auto_generated")]
    public bool AutoGenerated { get; set; } = true;

    [Column("created_at")]
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    // Navigation properties
    [ForeignKey("RoundId")]
    public virtual Round Round { get; set; } = null!;
    
    [ForeignKey("UserId")]
    public virtual User User { get; set; } = null!;
}